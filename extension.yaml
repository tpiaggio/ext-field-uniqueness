# Learn detailed information about the fields of an extension.yaml file in the docs:
# https://firebase.google.com/docs/extensions/alpha/ref-extension-yaml

name: ext-field-uniqueness  # Identifier for your extension
version: 0.1.4  # Follow semver versioning
specVersion: v1beta  # Version of the Firebase Extensions specification

# Friendly display name for your extension (~3-5 words)
displayName: Field Uniqueness

# Brief description of the task your extension performs (~1 sentence)
description: >-
  Ensures uniqueness on a specified field of a document written to a specified Cloud Firestore collection.

license: Apache-2.0  # https://spdx.org/licenses/

author:
  authorName: Tomas Piaggio
url: https://github.com/tpiaggio

roles:
  - role: datastore.user
    reason: Allows the extension to write documents to Cloud Firestore.

# Public URL for the source code of your extension
sourceUrl: https://github.com/tpiaggio/ext-field-uniqueness

# Specify whether a paid-tier billing plan is required to use your extension.
# Learn more in the docs: https://firebase.google.com/docs/extensions/alpha/ref-extension-yaml#billing-required-field
billingRequired: true

# In an `apis` field, list any Google APIs (like Cloud Translation, BigQuery, etc.)
# required for your extension to operate.
# Learn more in the docs: https://firebase.google.com/docs/extensions/alpha/ref-extension-yaml#apis-field

# In a `roles` field, list any IAM access roles required for your extension to operate.
# Learn more in the docs: https://firebase.google.com/docs/extensions/alpha/ref-extension-yaml#roles-field

# In the `resources` field, list each of your extension's functions, including the trigger for each function.
# Learn more in the docs: https://firebase.google.com/docs/extensions/alpha/ref-extension-yaml#resources-field
resources:
  - name: fieldUniqueness
    type: firebaseextensions.v1beta.function
    description: >-
      HTTP request-triggered function that responds with a specified greeting message
    properties:
      # LOCATION is a user-configured parameter value specified by the user during installation.
      location: ${LOCATION}
      runtime: nodejs14
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.write
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${COLLECTION_PATH}/{documentId}
  - name: fieldUniquenessBackfill
    type: firebaseextensions.v1beta.function
    description:
     Searches your specified Cloud Firestore collection for existing documents, then writes the new documents in the aux collection
    properties:
      location: ${param:LOCATION}
      runtime: nodejs14
      availableMemoryMb: 1024
      timeout: 540s
      taskQueueTrigger: {}

# In the `params` field, set up your extension's user-configured parameters.
# Learn more in the docs: https://firebase.google.com/docs/extensions/alpha/ref-extension-yaml#params-field
params:
  - param: COLLECTION_PATH
    label: Collection path
    description: >-
      What is the path to the collection that contains the field that you want to check for uniqueness?
    type: string
    example: users
    default: users
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Must be a valid Cloud Firestore Collection
    required: true
  
  - param: FIELD_NAME
    label: Field name
    description: >-
      What is the name of the field that you want to check for uniqueness?
    type: string
    example: username
    default: username
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Must be a valid Cloud Firestore Field
    required: true

  - param: HASH_FIELD
    label: Hash field
    description: >-
      The value of the unique field will be used as an id for a new document in Firestore. Would you like to hash the value of the field due to constraints on document IDs?
    type: select
    options:
      - label: Yes (hash using the MD5 algorithm)
        value: yes
      - label: No (validate on the client's side)
        value: no
    required: true

  - param: AUX_COLLECTION_PATH
    label: Aux collection path
    description: >-
      What is the name of the auxiliar collection where you want to write documents?
    type: string
    example: usernames
    default: usernames
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Must be a valid Cloud Firestore Collection
    required: true

  - param: DO_BACKFILL
    label: Check uniqueness for existing documents?
    description: >
      Should existing documents in the Firestore collection be checked for field uniqueness as well?
    type: select
    required: true
    options:
      - label: Yes
        value: yes
      - label: No
        value: no

  - param: LOCATION
    label: Cloud Functions location
    description: >-
      Where do you want to deploy the functions created for this extension?
      For help selecting a location, refer to the [location selection
      guide](https://firebase.google.com/docs/functions/locations).
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Los Angeles (us-west2)
        value: us-west2
      - label: Salt Lake City (us-west3)
        value: us-west3
      - label: Las Vegas (us-west4)
        value: us-west4
      - label: Warsaw (europe-central2)
        value: europe-central2
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Zurich (europe-west6)
        value: europe-west6
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
      - label: Osaka (asia-northeast2)
        value: asia-northeast2
      - label: Seoul (asia-northeast3)
        value: asia-northeast3
      - label: Mumbai (asia-south1)
        value: asia-south1
      - label: Jakarta (asia-southeast2)
        value: asia-southeast2
      - label: Montreal (northamerica-northeast1)
        value: northamerica-northeast1
      - label: Sao Paulo (southamerica-east1)
        value: southamerica-east1
      - label: Sydney (australia-southeast1)
        value: australia-southeast1
    required: true
    immutable: true


lifecycleEvents:
  onInstall:
    function: fieldUniquenessBackfill
    processingMessage: "Checking uniqueness for existing documents in ${COLLECTION_PATH}"
  onUpdate:
    function: fieldUniquenessBackfill
    processingMessage: "Checking uniqueness for existing documents in ${COLLECTION_PATH}"
  onConfigure:
    function: fieldUniquenessBackfill
    processingMessage: "Checking uniqueness for existing documents in ${COLLECTION_PATH}"